// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ydb-platform/ydb-go-genproto/Ydb_Coordination_V1 (interfaces: CoordinationServiceClient,CoordinationService_SessionClient)
//
// Generated by this command:
//
//	mockgen -destination grpc_client_mock_test.go -package coordination -write_package_comment=false github.com/ydb-platform/ydb-go-genproto/Ydb_Coordination_V1 CoordinationServiceClient,CoordinationService_SessionClient
package coordination

import (
	context "context"
	reflect "reflect"

	Ydb_Coordination_V1 "github.com/ydb-platform/ydb-go-genproto/Ydb_Coordination_V1"
	Ydb_Coordination "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Coordination"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockCoordinationServiceClient is a mock of CoordinationServiceClient interface.
type MockCoordinationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinationServiceClientMockRecorder
}

// MockCoordinationServiceClientMockRecorder is the mock recorder for MockCoordinationServiceClient.
type MockCoordinationServiceClientMockRecorder struct {
	mock *MockCoordinationServiceClient
}

// NewMockCoordinationServiceClient creates a new mock instance.
func NewMockCoordinationServiceClient(ctrl *gomock.Controller) *MockCoordinationServiceClient {
	mock := &MockCoordinationServiceClient{ctrl: ctrl}
	mock.recorder = &MockCoordinationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinationServiceClient) EXPECT() *MockCoordinationServiceClientMockRecorder {
	return m.recorder
}

// AlterNode mocks base method.
func (m *MockCoordinationServiceClient) AlterNode(arg0 context.Context, arg1 *Ydb_Coordination.AlterNodeRequest, arg2 ...grpc.CallOption) (*Ydb_Coordination.AlterNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AlterNode", varargs...)
	ret0, _ := ret[0].(*Ydb_Coordination.AlterNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlterNode indicates an expected call of AlterNode.
func (mr *MockCoordinationServiceClientMockRecorder) AlterNode(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterNode", reflect.TypeOf((*MockCoordinationServiceClient)(nil).AlterNode), varargs...)
}

// CreateNode mocks base method.
func (m *MockCoordinationServiceClient) CreateNode(arg0 context.Context, arg1 *Ydb_Coordination.CreateNodeRequest, arg2 ...grpc.CallOption) (*Ydb_Coordination.CreateNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNode", varargs...)
	ret0, _ := ret[0].(*Ydb_Coordination.CreateNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockCoordinationServiceClientMockRecorder) CreateNode(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockCoordinationServiceClient)(nil).CreateNode), varargs...)
}

// DescribeNode mocks base method.
func (m *MockCoordinationServiceClient) DescribeNode(arg0 context.Context, arg1 *Ydb_Coordination.DescribeNodeRequest, arg2 ...grpc.CallOption) (*Ydb_Coordination.DescribeNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeNode", varargs...)
	ret0, _ := ret[0].(*Ydb_Coordination.DescribeNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeNode indicates an expected call of DescribeNode.
func (mr *MockCoordinationServiceClientMockRecorder) DescribeNode(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeNode", reflect.TypeOf((*MockCoordinationServiceClient)(nil).DescribeNode), varargs...)
}

// DropNode mocks base method.
func (m *MockCoordinationServiceClient) DropNode(arg0 context.Context, arg1 *Ydb_Coordination.DropNodeRequest, arg2 ...grpc.CallOption) (*Ydb_Coordination.DropNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropNode", varargs...)
	ret0, _ := ret[0].(*Ydb_Coordination.DropNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropNode indicates an expected call of DropNode.
func (mr *MockCoordinationServiceClientMockRecorder) DropNode(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropNode", reflect.TypeOf((*MockCoordinationServiceClient)(nil).DropNode), varargs...)
}

// Session mocks base method.
func (m *MockCoordinationServiceClient) Session(arg0 context.Context, arg1 ...grpc.CallOption) (Ydb_Coordination_V1.CoordinationService_SessionClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Session", varargs...)
	ret0, _ := ret[0].(Ydb_Coordination_V1.CoordinationService_SessionClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Session indicates an expected call of Session.
func (mr *MockCoordinationServiceClientMockRecorder) Session(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockCoordinationServiceClient)(nil).Session), varargs...)
}

// MockCoordinationService_SessionClient is a mock of CoordinationService_SessionClient interface.
type MockCoordinationService_SessionClient struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinationService_SessionClientMockRecorder
}

// MockCoordinationService_SessionClientMockRecorder is the mock recorder for MockCoordinationService_SessionClient.
type MockCoordinationService_SessionClientMockRecorder struct {
	mock *MockCoordinationService_SessionClient
}

// NewMockCoordinationService_SessionClient creates a new mock instance.
func NewMockCoordinationService_SessionClient(ctrl *gomock.Controller) *MockCoordinationService_SessionClient {
	mock := &MockCoordinationService_SessionClient{ctrl: ctrl}
	mock.recorder = &MockCoordinationService_SessionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinationService_SessionClient) EXPECT() *MockCoordinationService_SessionClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockCoordinationService_SessionClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockCoordinationService_SessionClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockCoordinationService_SessionClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockCoordinationService_SessionClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCoordinationService_SessionClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCoordinationService_SessionClient)(nil).Context))
}

// Header mocks base method.
func (m *MockCoordinationService_SessionClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockCoordinationService_SessionClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockCoordinationService_SessionClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockCoordinationService_SessionClient) Recv() (*Ydb_Coordination.SessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Ydb_Coordination.SessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockCoordinationService_SessionClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockCoordinationService_SessionClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockCoordinationService_SessionClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCoordinationService_SessionClientMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCoordinationService_SessionClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockCoordinationService_SessionClient) Send(arg0 *Ydb_Coordination.SessionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockCoordinationService_SessionClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCoordinationService_SessionClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockCoordinationService_SessionClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCoordinationService_SessionClientMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCoordinationService_SessionClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockCoordinationService_SessionClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockCoordinationService_SessionClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockCoordinationService_SessionClient)(nil).Trailer))
}
